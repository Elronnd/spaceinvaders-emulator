import CPU;

struct Opcode {
	// returns <0 if there was no answer, otherwise returns the answer
	short function(State state, ubyte opcode, ubyte[] args) fun;
	string opcode;
	string format_string;
	ubyte size; // number of arguments after the opcode
	bool invalid;
}

short un_impl(State state, ubyte opcode, ubyte[] args) {
	import std.stdio;
	writefln("Unimplemented opcode %s!", cformat(opcodes[opcode].opcode ~ " " ~ opcodes[opcode].format_string, args));
	return -1;
}
short nop(State state, ubyte opcode, ubyte[] args) {
	return -1;
}

// custom formatter.  Just accepts '%!' by itself (or %% to escape)
Opcode[] opcodes = [
	/*0x00: */Opcode(&nop, "NOP"),
	/*0x01: */Opcode(&un_impl, "LXI", "B,#$%1%0", 2),
	/*0x02: */Opcode(&un_impl, "STAX B"),
	/*0x03: */Opcode(&un_impl, "INX B"),
	/*0x04: */Opcode(&un_impl, "INR B"),
	/*0x05: */Opcode(&un_impl, "DCR B"),
	/*0x06: */Opcode(&un_impl, "MVI", "B,#0x%!", 1),
	/*0x07: */Opcode(&un_impl, "RLC"),
	/*0x08: */Opcode(&nop, "NOP"),
	/*0x09: */Opcode(&un_impl, "DAD B"),
	/*0x0a: */Opcode(&un_impl, "LDAX B"),
	/*0x0b: */Opcode(&un_impl, "DCX B"),
	/*0x0c: */Opcode(&un_impl, "INR C"),
	/*0x0d: */Opcode(&un_impl, "DCR C"),
	/*0x0e: */Opcode(&un_impl, "MVI", "C,#$%!", 1),
	/*0x0f: */Opcode(&un_impl, "RRC",),
	/*0x10: */Opcode(&nop, "NOP"),
	/*0x11: */Opcode(&un_impl, "LXI", "D,#$%1%0", 2),
	/*0x12: */Opcode(&un_impl, "STAX D"),
	/*0x13: */Opcode(&un_impl, "INX D"),
	/*0x14: */Opcode(&un_impl, "INR D"),
	/*0x15: */Opcode(&un_impl, "DCR D"),
	/*0x16: */Opcode(&un_impl, "MVI", "D,#$%!", 1),
	/*0x17: */Opcode(&un_impl, "RAL"),
	/*0x18: */Opcode(&nop, "NOP"),
	/*0x19: */Opcode(&un_impl, "DAD D"),
	/*0x1a: */Opcode(&un_impl, "LDAX D"),
	/*0x1b: */Opcode(&un_impl, "DCX D"),
	/*0x1c: */Opcode(&un_impl, "INR E"),
	/*0x1d: */Opcode(&un_impl, "DCR E"),
	/*0x1e: */Opcode(&un_impl, "MVI", "E,#$%!", 1),
	/*0x1f: */Opcode(&un_impl, "RAR"),
	/*0x20: */Opcode(&un_impl, "RIM"),
	/*0x21: */Opcode(&un_impl, "LXI", "H,#$%1%0", 2),
	/*0x22: */Opcode(&un_impl, "SHLD", "TODO what the fuck (adr) <-L; (adr+1)<-H", 2),
	/*0x23: */Opcode(&un_impl, "INX H"),
	/*0x24: */Opcode(&un_impl, "INR H"),
	/*0x25: */Opcode(&un_impl, "DCR H"),
	/*0x26: */Opcode(&un_impl, "MVI", "H,#$%!", 1),
	/*0x27: */Opcode(&un_impl, "DAA", "special"),
	/*0x28: */Opcode(&nop, "NOP"),
	/*0x29: */Opcode(&un_impl, "DAD H"),
	/*0x2a: */Opcode(&un_impl, "LHLD", "TODO what the fuck (same as SHDL"),
	/*0x2b: */Opcode(&un_impl, "DCX H"),
	/*0x2c: */Opcode(&un_impl, "INR L"),
	/*0x2d: */Opcode(&un_impl, "DCR L"),
	/*0x2e: */Opcode(&un_impl, "MVI", "L,#$%!", 1),
	/*0x2f: */Opcode(&un_impl, "CMA"),
	/*0x30: */Opcode(&un_impl, "SIM", "special"),
	/*0x31: */Opcode(&un_impl, "LXI", "SP,#$%1%0", 2),
	/*0x32: */Opcode(&un_impl, "STA", "$%1%0", 2),
	/*0x33: */Opcode(&un_impl, "INX", "SP"),
	/*0x34: */Opcode(&un_impl, "INR", "M"),
	/*0x35: */Opcode(&un_impl, "DCR", "M"),
	/*0x36: */Opcode(&un_impl, "MVI", "M,#$%!", 1),
	/*0x37: */Opcode(&un_impl, "STC"),
	/*0x38: */Opcode(&nop, "NOP"),
	/*0x39: */Opcode(&un_impl, "DAD SP"),
	/*0x3a: */Opcode(&un_impl, "LDA", "$%1%0", 2),
	/*0x3b: */Opcode(&un_impl, "DCX SP"),
	/*0x3c: */Opcode(&un_impl, "INR A"),
	/*0x3d: */Opcode(&un_impl, "DCR A"),
	/*0x3e: */Opcode(&un_impl, "MVI", "A,#0x%!", 1),
	/*0x3f: */Opcode(&un_impl, "CMC"),
	/*0x40: */Opcode(&un_impl, "MOV", "B,B"),
	/*0x41: */Opcode(&un_impl, "MOV", "B,C"),
	/*0x42: */Opcode(&un_impl, "MOV", "B,D"),
	/*0x43: */Opcode(&un_impl, "MOV", "B,E"),
	/*0x44: */Opcode(&un_impl, "MOV", "B,H"),
	/*0x45: */Opcode(&un_impl, "MOV", "B,L"),
	/*0x46: */Opcode(&un_impl, "MOV", "B,M"),
	/*0x47: */Opcode(&un_impl, "MOV", "B,A"),
	/*0x48: */Opcode(&un_impl, "MOV", "C,B"),
	/*0x49: */Opcode(&un_impl, "MOV", "C,C"),
	/*0x4a: */Opcode(&un_impl, "MOV", "C,D"),
	/*0x4b: */Opcode(&un_impl, "MOV", "C,E"),
	/*0x4c: */Opcode(&un_impl, "MOV", "C,H"),
	/*0x4d: */Opcode(&un_impl, "MOV", "C,L"),
	/*0x4e: */Opcode(&un_impl, "MOV", "C,M"),
	/*0x4f: */Opcode(&un_impl, "MOV", "C,A"),
	/*0x50: */Opcode(&un_impl, "MOV", "D,B"),
	/*0x51: */Opcode(&un_impl, "MOV", "D,C"),
	/*0x52: */Opcode(&un_impl, "MOV", "D,D"),
	/*0x53: */Opcode(&un_impl, "MOV", "D,E"),
	/*0x54: */Opcode(&un_impl, "MOV", "D,H"),
	/*0x55: */Opcode(&un_impl, "MOV", "D,L"),
	/*0x56: */Opcode(&un_impl, "MOV", "D,M"),
	/*0x57: */Opcode(&un_impl, "MOV", "D,A"),
	/*0x58: */Opcode(&un_impl, "MOV", "E,B"),
	/*0x59: */Opcode(&un_impl, "MOV", "E,C"),
	/*0x5a: */Opcode(&un_impl, "MOV", "E,D"),
	/*0x5b: */Opcode(&un_impl, "MOV", "E,E"),
	/*0x5c: */Opcode(&un_impl, "MOV", "E,H"),
	/*0x5d: */Opcode(&un_impl, "MOV", "E,L"),
	/*0x5e: */Opcode(&un_impl, "MOV", "E,M"),
	/*0x5f: */Opcode(&un_impl, "MOV", "E,A"),
	/*0x60: */Opcode(&un_impl, "MOV", "H,B"),
	/*0x61: */Opcode(&un_impl, "MOV", "H,C"),
	/*0x62: */Opcode(&un_impl, "MOV", "H,D"),
	/*0x63: */Opcode(&un_impl, "MOV", "H,E"),
	/*0x64: */Opcode(&un_impl, "MOV", "H,H"),
	/*0x65: */Opcode(&un_impl, "MOV", "H,L"),
	/*0x66: */Opcode(&un_impl, "MOV", "H,M"),
	/*0x67: */Opcode(&un_impl, "MOV", "H,A"),
	/*0x68: */Opcode(&un_impl, "MOV", "L,B"),
	/*0x69: */Opcode(&un_impl, "MOV", "L,C"),
	/*0x6a: */Opcode(&un_impl, "MOV", "L,D"),
	/*0x6b: */Opcode(&un_impl, "MOV", "L,E"),
	/*0x6c: */Opcode(&un_impl, "MOV", "L,H"),
	/*0x6d: */Opcode(&un_impl, "MOV", "L,L"),
	/*0x6e: */Opcode(&un_impl, "MOV", "L,M"),
	/*0x6f: */Opcode(&un_impl, "MOV", "L,A"),
	/*0x70: */Opcode(&un_impl, "MOV", "M,B"),
	/*0x71: */Opcode(&un_impl, "MOV", "M,C"),
	/*0x72: */Opcode(&un_impl, "MOV", "M,D"),
	/*0x73: */Opcode(&un_impl, "MOV", "M,E"),
	/*0x74: */Opcode(&un_impl, "MOV", "M,H"),
	/*0x75: */Opcode(&un_impl, "MOV", "M,L"),
	/*0x76: */Opcode(&un_impl, "HLT"),
	/*0x77: */Opcode(&un_impl, "MOV", "M,A"),
	/*0x78: */Opcode(&un_impl, "MOV", "A,B"),
	/*0x79: */Opcode(&un_impl, "MOV", "A,C"),
	/*0x7a: */Opcode(&un_impl, "MOV", "A,D"),
	/*0x7b: */Opcode(&un_impl, "MOV", "A,E"),
	/*0x7c: */Opcode(&un_impl, "MOV", "A,H"),
	/*0x7d: */Opcode(&un_impl, "MOV", "A,L"),
	/*0x7e: */Opcode(&un_impl, "MOV", "A,M"),
	/*0x7f: */Opcode(&un_impl, "MOV", "A,A"),
	/*0x80: */Opcode(&un_impl, "ADD", "B"),
	/*0x81: */Opcode(&un_impl, "ADD", "C"),
	/*0x82: */Opcode(&un_impl, "ADD", "D"),
	/*0x83: */Opcode(&un_impl, "ADD", "E"),
	/*0x84: */Opcode(&un_impl, "ADD", "H"),
	/*0x85: */Opcode(&un_impl, "ADD", "L"),
	/*0x86: */Opcode(&un_impl, "ADD", "M"),
	/*0x87: */Opcode(&un_impl, "ADD", "A"),
	/*0x88: */Opcode(&un_impl, "ADC", "B"),
	/*0x89: */Opcode(&un_impl, "ADC", "C"),
	/*0x8a: */Opcode(&un_impl, "ADC", "D"),
	/*0x8b: */Opcode(&un_impl, "ADC", "D"),
	/*0x8c: */Opcode(&un_impl, "ADC", "H"),
	/*0x8d: */Opcode(&un_impl, "ADC", "L"),
	/*0x8e: */Opcode(&un_impl, "ADC", "M"),
	/*0x8f: */Opcode(&un_impl, "ADC", "A"),
	/*0x90: */Opcode(&un_impl, "SUB", "B"),
	/*0x91: */Opcode(&un_impl, "SUB", "C"),
	/*0x92: */Opcode(&un_impl, "SUB", "D"),
	/*0x93: */Opcode(&un_impl, "SUB", "E"),
	/*0x94: */Opcode(&un_impl, "SUB", "H"),
	/*0x95: */Opcode(&un_impl, "SUB", "L"),
	/*0x96: */Opcode(&un_impl, "SUB", "M"),
	/*0x97: */Opcode(&un_impl, "SUB", "A"),
	/*0x98: */Opcode(&un_impl, "SBB", "B"),
	/*0x99: */Opcode(&un_impl, "SBB", "C"),
	/*0x9a: */Opcode(&un_impl, "SBB", "D"),
	/*0x9b: */Opcode(&un_impl, "SBB", "E"),
	/*0x9c: */Opcode(&un_impl, "SBB", "H"),
	/*0x9d: */Opcode(&un_impl, "SBB", "L"),
	/*0x9e: */Opcode(&un_impl, "SBB", "M"),
	/*0x9f: */Opcode(&un_impl, "SBB", "A"),
	/*0xa0: */Opcode(&un_impl, "ANA", "B"),
	/*0xa1: */Opcode(&un_impl, "ANA", "C"),
	/*0xa2: */Opcode(&un_impl, "ANA", "D"),
	/*0xa3: */Opcode(&un_impl, "ANA", "E"),
	/*0xa4: */Opcode(&un_impl, "ANA", "H"),
	/*0xa5: */Opcode(&un_impl, "ANA", "L"),
	/*0xa6: */Opcode(&un_impl, "ANA", "M"),
	/*0xa7: */Opcode(&un_impl, "ANA", "A"),
	/*0xa8: */Opcode(&un_impl, "XRA", "B"),
	/*0xa9: */Opcode(&un_impl, "XRA", "C"),
	/*0xaa: */Opcode(&un_impl, "XRA", "D"),
	/*0xab: */Opcode(&un_impl, "XRA", "E"),
	/*0xac: */Opcode(&un_impl, "XRA", "H"),
	/*0xad: */Opcode(&un_impl, "XRA", "L"),
	/*0xae: */Opcode(&un_impl, "XRA", "M"),
	/*0xaf: */Opcode(&un_impl, "XRA", "A"),
	/*0xb0: */Opcode(&un_impl, "ORA", "B"),
	/*0xb1: */Opcode(&un_impl, "ORA", "C"),
	/*0xb2: */Opcode(&un_impl, "ORA", "D"),
	/*0xb3: */Opcode(&un_impl, "ORA", "E"),
	/*0xb4: */Opcode(&un_impl, "ORA", "H"),
	/*0xb5: */Opcode(&un_impl, "ORA", "L"),
	/*0xb6: */Opcode(&un_impl, "ORA", "M"),
	/*0xb7: */Opcode(&un_impl, "ORA", "A"),
	/*0xb8: */Opcode(&un_impl, "CMP", "B"),
	/*0xb9: */Opcode(&un_impl, "CMP", "C"),
	/*0xba: */Opcode(&un_impl, "CMP", "D"),
	/*0xbb: */Opcode(&un_impl, "CMP", "E"),
	/*0xbc: */Opcode(&un_impl, "CMP", "H"),
	/*0xbd: */Opcode(&un_impl, "CMP", "L"),
	/*0xbe: */Opcode(&un_impl, "CMP", "M"),
	/*0xbf: */Opcode(&un_impl, "CMP", "A"),
	/*0xc0: */Opcode(&un_impl, "RNZ"),
	/*0xc1: */Opcode(&un_impl, "POP", "B"),
	/*0xc2: */Opcode(&un_impl, "JNZ", "$%1%0", 2),
	/*0xc3: */Opcode(&un_impl, "JMP", "$%1%0", 2),
	/*0xc4: */Opcode(&un_impl, "CNZ", "$%1%0", 2),
	/*0xc5: */Opcode(&un_impl, "PUSH", "B"),
	/*0xc6: */Opcode(&un_impl, "ADI", "#$%!", 1),
	/*0xc7: */Opcode(&un_impl, "RST 0"),
	/*0xc8: */Opcode(&un_impl, "RZ"),
	/*0xc9: */Opcode(&un_impl, "RET"),
	/*0xca: */Opcode(&un_impl, "JZ", "$%1%0", 2),
	/*0xcb: */Opcode(&nop, "NOP"),
	/*0xcc: */Opcode(&un_impl, "CZ", "$%1%0", 2),
	/*0xcd: */Opcode(&un_impl, "CALL", "$%1%0", 2),
	/*0xce: */Opcode(&un_impl, "ACI", "#$%!", 1),
	/*0xcf: */Opcode(&un_impl, "RST", "1"),
	/*0xd0: */Opcode(&un_impl, "RNC"),
	/*0xd1: */Opcode(&un_impl, "POP", "D"),
	/*0xd2: */Opcode(&un_impl, "JNC", "$%1%0", 2),
	/*0xd3: */Opcode(&un_impl, "OUT", "Special?  %!", 1),
	/*0xd4: */Opcode(&un_impl, "CNC", "$%1%0", 2),
	/*0xd5: */Opcode(&un_impl, "PUSH", "D"),
	/*0xd6: */Opcode(&un_impl, "SUI", "#$%!", 1),
	/*0xd7: */Opcode(&un_impl, "RST", "2"),
	/*0xd8: */Opcode(&un_impl, "RC"),
	/*0xd9: */Opcode(&nop, "NOP"),
	/*0xda: */Opcode(&un_impl, "JC", "$%1%0", 2),
	/*0xdb: */Opcode(&un_impl, "IN", "#$%! (special)", 1),
	/*0xdc: */Opcode(&un_impl, "CC", "$%1%0", 2),
	/*0xdd: */Opcode(&nop, "NOP"),
	/*0xde: */Opcode(&un_impl, "SBI", "#$%!", 1),
	/*0xdf: */Opcode(&un_impl, "RST 3"),
	/*0xe0: */Opcode(&un_impl, "RPO"),
	/*0xe1: */Opcode(&un_impl, "POP H"),
	/*0xe2: */Opcode(&un_impl, "JPO", "$%1%0", 2),
	/*0xe3: */Opcode(&un_impl, "XTHL"),
	/*0xe4: */Opcode(&un_impl, "CPO", "$%1%0", 2),
	/*0xe5: */Opcode(&un_impl, "PUSH", "H"),
	/*0xe6: */Opcode(&un_impl, "ANI", "#$%!", 1),
	/*0xe7: */Opcode(&un_impl, "RST 4"),
	/*0xe8: */Opcode(&un_impl, "RPE"),
	/*0xe9: */Opcode(&un_impl, "PCHL"),
	/*0xea: */Opcode(&un_impl, "JPE", "$%1%0", 2),
	/*0xeb: */Opcode(&un_impl, "XCHG"),
	/*0xec: */Opcode(&un_impl, "CPE", "$%1%0", 2),
	/*0xed: */Opcode(&nop, "NOP"),
	/*0xee: */Opcode(&un_impl, "XRI", "#$%!", 1),
	/*0xef: */Opcode(&un_impl, "RST", "5"),
	/*0xf0: */Opcode(&un_impl, "RP"),
	/*0xf1: */Opcode(&un_impl, "POP", "PSW"),
	/*0xf2: */Opcode(&un_impl, "JP", "$%1%0", 2),
	/*0xf3: */Opcode(&un_impl, "DI"),
	/*0xf4: */Opcode(&un_impl, "CP", "$%1%0", 2),
	/*0xf5: */Opcode(&un_impl, "PUSH", "PSW"),
	/*0xf6: */Opcode(&un_impl, "ORI", "#$%!", 1),
	/*0xf7: */Opcode(&un_impl, "RST", "6"),
	/*0xf8: */Opcode(&un_impl, "RM"),
	/*0xf9: */Opcode(&un_impl, "SPHL"),
	/*0xfa: */Opcode(&un_impl, "JM", "$%1%0", 2),
	/*0xfb: */Opcode(&un_impl, "EI"),
	/*0xfc: */Opcode(&un_impl, "CM", "$%1%0", 2),
	/*0xfd: */Opcode(&nop, "NOP"),
	/*0xfe: */Opcode(&un_impl, "CPI", "#$%!", 1),
	/*0xff: */Opcode(&un_impl, "RST", "7"),
	];
