struct Opcode {
	string opcode;
	string format_string;
	ubyte size; // number of arguments after the opcode
	bool invalid;
}

// custom formatter.  Just accepts '%!' by itself (or %% to escape)
Opcode[ubyte] opcodes;

static this() {
	opcodes = [
		0x00: Opcode("NOP"),
		0x01: Opcode("LXI", "B,#$%1%0", 2),
		0x02: Opcode("STAX B"),
		0x03: Opcode("INX B"),
		0x04: Opcode("INR B"),
		0x05: Opcode("DCR B"),
		0x06: Opcode("MVI", "B,#$%!", 1),
		0x07: Opcode("RLC"),
		0x08: Opcode("NOP"),
		0x09: Opcode("DAD B"),
		0x0a: Opcode("LDAX B"),
		0x0b: Opcode("DCX B"),
		0x0c: Opcode("INR C"),
		0x0d: Opcode("DCR C"),
		0x0e: Opcode("MVI", "C,#$%!", 1),
		0x0f: Opcode("RRC",),
		0x10: Opcode("NOP"),
		0x11: Opcode("LXI", "D,#$%1%0", 2),
		0x12: Opcode("STAX D"),
		0x13: Opcode("INX D"),
		0x14: Opcode("INR D"),
		0x15: Opcode("DCR D"),
		0x16: Opcode("MVI", "D,#$%!", 1),
		0x17: Opcode("RAL"),
		0x18: Opcode("NOP"),
		0x19: Opcode("DAD D"),
		0x1a: Opcode("LDAX D"),
		0x1b: Opcode("DCX D"),
		0x1c: Opcode("INR E"),
		0x1d: Opcode("DCR E"),
		0x1e: Opcode("MVI", "E,#$%!", 1),
		0x1f: Opcode("RAR"),
		0x20: Opcode("RIM"),
		0x21: Opcode("LXI", "H,#$%1%0", 2),
		0x22: Opcode("SHLD", "TODO what the fuck (adr) <-L; (adr+1)<-H", 2),
		0x23: Opcode("INX H"),
		0x24: Opcode("INR H"),
		0x25: Opcode("DCR H"),
		0x26: Opcode("MVI", "H,#$%!", 1),
		0x27: Opcode("DAA", "special"),
		0x28: Opcode("NOP"),
		0x29: Opcode("DAD H"),
		0x2a: Opcode("LHLD", "TODO what the fuck (same as SHDL"),
		0x2b: Opcode("DCX H"),
		0x2c: Opcode("INR L"),
		0x2d: Opcode("DCR L"),
		0x2e: Opcode("MVI", "L,#$%!", 1),
		0x2f: Opcode("CMA"),
		0x30: Opcode("SIM", "special"),
		0x31: Opcode("LXI", "SP,#$%1%0", 2),
		0x32: Opcode("STA", "$%1%0", 2),
		0x33: Opcode("INX", "SP"),
		0x34: Opcode("INR", "M"),
		0x35: Opcode("DCR", "M"),
		0x36: Opcode("MVI", "M,#$%!", 1),
		0x37: Opcode("STC"),
		0x38: Opcode("NOP"),
		0x39: Opcode("DAD SP"),
		0x3a: Opcode("LDA", "$%1%0", 2),
		0x3b: Opcode("DCX SP"),
		0x3c: Opcode("INR A"),
		0x3d: Opcode("DCR A"),
		0x3e: Opcode("MVI", "A,#$%!", 1),
		0x3f: Opcode("CMC"),
		0x40: Opcode("MOV", "B,B"),
		0x41: Opcode("MOV", "B,C"),
		0x42: Opcode("MOV", "B,D"),
		0x43: Opcode("MOV", "B,E"),
		0x44: Opcode("MOV", "B,H"),
		0x45: Opcode("MOV", "B,L"),
		0x46: Opcode("MOV", "B,M"),
		0x47: Opcode("MOV", "B,A"),
		0x48: Opcode("MOV", "C,B"),
		0x49: Opcode("MOV", "C,C"),
		0x4a: Opcode("MOV", "C,D"),
		0x4b: Opcode("MOV", "C,E"),
		0x4c: Opcode("MOV", "C,H"),
		0x4d: Opcode("MOV", "C,L"),
		0x4e: Opcode("MOV", "C,M"),
		0x4f: Opcode("MOV", "C,A"),
		0x50: Opcode("MOV", "D,B"),
		0x51: Opcode("MOV", "D,C"),
		0x52: Opcode("MOV", "D,D"),
		0x53: Opcode("MOV", "D,E"),
		0x54: Opcode("MOV", "D,H"),
		0x55: Opcode("MOV", "D,L"),
		0x56: Opcode("MOV", "D,M"),
		0x57: Opcode("MOV", "D,A"),
		0x58: Opcode("MOV", "E,B"),
		0x59: Opcode("MOV", "E,C"),
		0x5a: Opcode("MOV", "E,D"),
		0x5b: Opcode("MOV", "E,E"),
		0x5c: Opcode("MOV", "E,H"),
		0x5d: Opcode("MOV", "E,L"),
		0x5e: Opcode("MOV", "E,M"),
		0x5f: Opcode("MOV", "E,A"),
		0x60: Opcode("MOV", "H,B"),
		0x61: Opcode("MOV", "H,C"),
		0x62: Opcode("MOV", "H,D"),
		0x63: Opcode("MOV", "H,E"),
		0x64: Opcode("MOV", "H,H"),
		0x65: Opcode("MOV", "H,L"),
		0x66: Opcode("MOV", "H,M"),
		0x67: Opcode("MOV", "H,A"),
		0x68: Opcode("MOV", "L,B"),
		0x69: Opcode("MOV", "L,C"),
		0x6a: Opcode("MOV", "L,D"),
		0x6b: Opcode("MOV", "L,E"),
		0x6c: Opcode("MOV", "L,H"),
		0x6d: Opcode("MOV", "L,L"),
		0x6e: Opcode("MOV", "L,M"),
		0x6f: Opcode("MOV", "L,A"),
		0x70: Opcode("MOV", "M,B"),
		0x71: Opcode("MOV", "M,C"),
		0x72: Opcode("MOV", "M,D"),
		0x73: Opcode("MOV", "M,E"),
		0x74: Opcode("MOV", "M,H"),
		0x75: Opcode("MOV", "M,L"),
		0x76: Opcode("HLT"),
		0x77: Opcode("MOV", "M,A"),
		0x78: Opcode("MOV", "A,B"),
		0x79: Opcode("MOV", "A,C"),
		0x7a: Opcode("MOV", "A,D"),
		0x7b: Opcode("MOV", "A,E"),
		0x7c: Opcode("MOV", "A,H"),
		0x7d: Opcode("MOV", "A,L"),
		0x7e: Opcode("MOV", "A,M"),
		0x7f: Opcode("MOV", "A,A"),
		0x80: Opcode("ADD", "B"),
		0x81: Opcode("ADD", "C"),
		0x82: Opcode("ADD", "D"),
		0x83: Opcode("ADD", "E"),
		0x84: Opcode("ADD", "H"),
		0x85: Opcode("ADD", "L"),
		0x86: Opcode("ADD", "M"),
		0x87: Opcode("ADD", "A"),
		0x88: Opcode("ADC", "B"),
		0x89: Opcode("ADC", "C"),
		0x8a: Opcode("ADC", "D"),
		0x8b: Opcode("ADC", "D"),
		0x8c: Opcode("ADC", "H"),
		0x8d: Opcode("ADC", "L"),
		0x8e: Opcode("ADC", "M"),
		0x8f: Opcode("ADC", "A"),
		0x90: Opcode("SUB", "B"),
		0x91: Opcode("SUB", "C"),
		0x92: Opcode("SUB", "D"),
		0x93: Opcode("SUB", "E"),
		0x94: Opcode("SUB", "H"),
		0x95: Opcode("SUB", "L"),
		0x96: Opcode("SUB", "M"),
		0x97: Opcode("SUB", "A"),
		0x98: Opcode("SBB", "B"),
		0x99: Opcode("SBB", "C"),
		0x9a: Opcode("SBB", "D"),
		0x9b: Opcode("SBB", "E"),
		0x9c: Opcode("SBB", "H"),
		0x9d: Opcode("SBB", "L"),
		0x9e: Opcode("SBB", "M"),
		0x9f: Opcode("SBB", "A"),
		0xa0: Opcode("ANA", "B"),
		0xa1: Opcode("ANA", "C"),
		0xa2: Opcode("ANA", "D"),
		0xa3: Opcode("ANA", "E"),
		0xa4: Opcode("ANA", "H"),
		0xa5: Opcode("ANA", "L"),
		0xa6: Opcode("ANA", "M"),
		0xa7: Opcode("ANA", "A"),
		0xa8: Opcode("XRA", "B"),
		0xa9: Opcode("XRA", "C"),
		0xaa: Opcode("XRA", "D"),
		0xab: Opcode("XRA", "E"),
		0xac: Opcode("XRA", "H"),
		0xad: Opcode("XRA", "L"),
		0xae: Opcode("XRA", "M"),
		0xaf: Opcode("XRA", "A"),
		0xb0: Opcode("ORA", "B"),
		0xb1: Opcode("ORA", "C"),
		0xb2: Opcode("ORA", "D"),
		0xb3: Opcode("ORA", "E"),
		0xb4: Opcode("ORA", "H"),
		0xb5: Opcode("ORA", "L"),
		0xb6: Opcode("ORA", "M"),
		0xb7: Opcode("ORA", "A"),
		0xb8: Opcode("CMP", "B"),
		0xb9: Opcode("CMP", "C"),
		0xba: Opcode("CMP", "D"),
		0xbb: Opcode("CMP", "E"),
		0xbc: Opcode("CMP", "H"),
		0xbd: Opcode("CMP", "L"),
		0xbe: Opcode("CMP", "M"),
		0xbf: Opcode("CMP", "A"),
		0xc0: Opcode("RNZ"),
		0xc1: Opcode("POP", "B"),
		0xc2: Opcode("JNZ", "$%1%0", 2),
		0xc3: Opcode("JMP", "$%1%0", 2),
		0xc4: Opcode("CNZ", "$%1%0", 2),
		0xc5: Opcode("PUSH", "B"),
		0xc6: Opcode("ADI", "#$%!", 1),
		0xc7: Opcode("RST 0"),
		0xc8: Opcode("RZ"),
		0xc9: Opcode("RET"),
		0xca: Opcode("JZ", "$%1%0", 2),
		0xcb: Opcode("NOP"),
		0xcc: Opcode("CZ", "$%1%0", 2),
		0xcd: Opcode("CALL", "$%1%0", 2),
		0xce: Opcode("ACI", "#$%!", 1),
		0xcf: Opcode("RST", "1"),
		0xd0: Opcode("RNC"),
		0xd1: Opcode("POP", "D"),
		0xd2: Opcode("JNC", "$%1%0", 2),
		0xd3: Opcode("OUT", "Special?  %!", 1),
		0xd4: Opcode("CNC", "$%1%0", 2),
		0xd5: Opcode("PUSH", "D"),
		0xd6: Opcode("SUI", "#$%!", 1),
		0xd7: Opcode("RST", "2"),
		0xd8: Opcode("RC"),
		0xd9: Opcode("NOP"),
		0xda: Opcode("JC", "$%1%0", 2),
		0xdb: Opcode("IN", "#$%! (special)", 1),
		0xdc: Opcode("CC", "$%1%0", 2),
		0xdd: Opcode("NOP"),
		0xde: Opcode("SBI", "#$%!", 1),
		0xdf: Opcode("RST 3"),
		0xe0: Opcode("RPO"),
		0xe1: Opcode("POP H"),
		0xe2: Opcode("JPO", "$%1%0", 2),
		0xe3: Opcode("XTHL"),
		0xe4: Opcode("CPO", "$%1%0", 2),
		0xe5: Opcode("PUSH", "H"),
		0xe6: Opcode("ANI", "#$%!", 1),
		0xe7: Opcode("RST 4"),
		0xe8: Opcode("RPE"),
		0xe9: Opcode("PCHL"),
		0xea: Opcode("JPE", "$%1%0", 2),
		0xeb: Opcode("XCHG"),
		0xec: Opcode("CPE", "$%1%0", 2),
		0xed: Opcode("NOP"),
		0xee: Opcode("XRI", "#$%!", 1),
		0xef: Opcode("RST", "5"),
		0xf0: Opcode("RP"),
		0xf1: Opcode("POP", "PSW"),
		0xf2: Opcode("JP", "$%1%0", 2),
		0xf3: Opcode("DI"),
		0xf4: Opcode("CP", "$%1%0", 2),
		0xf5: Opcode("PUSH", "PSW"),
		0xf6: Opcode("ORI", "#$%!", 1),
		0xf7: Opcode("RST", "6"),
		0xf8: Opcode("RM"),
		0xf9: Opcode("SPHL"),
		0xfa: Opcode("JM", "$%1%0", 2),
		0xfb: Opcode("EI"),
		0xfc: Opcode("CM", "$%1%0", 2),
		0xfd: Opcode("NOP"),
		0xfe: Opcode("CPI", "#$%!", 1),
		0xff: Opcode("RST", "7"),
		];
}
